<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">
		
    <!-- 引入资源文件 -->
     <!--<util:properties id="dataSourceProps" location="jdbc.properties"/> -->
    <!-- 配置dbcp数据源 -->
     <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="#{dataSourceProps['driver']}"/>
        <property name="url" value="#{dataSourceProps['url']}"/>
        <property name="username" value="#{dataSourceProps['username']}"/>
        <property name="password" value="#{dataSourceProps['password']}"/>
    </bean> -->
        <!-- 配置Session模板类 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
<!--        只能使用构造器注入 因为没有sqlSessionFactory set方法-->
        <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
    </bean>
    
    <!-- 配置事务管理器 -->
   <!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>-->
    
        <!-- 配置增强通知 -->
<!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            <tx:method name="query*" propagation="REQUIRED"/>-->
<!--            <tx:method name="get*" propagation="REQUIRED"/>-->
<!--            <tx:method name="add*" propagation="REQUIRED"/>-->
<!--            <tx:method name="*" read-only="true"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->
    
    <!-- 配置共享事务 -->
    <aop:config expose-proxy="true">
    <!-- 配置切点 -->
<!--    <aop:pointcut expression="execution(* com.mapc.service..*.*(..))" id="txPointcut"/>-->
    <!-- 配置切面 -->
<!--    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>-->
    </aop:config>
    
    <!-- 装配StudentDao -->
<!--    <bean id="studentDao" class="com.mapc.dao.impl.StudentDaoImpl" p:sqlSession-ref="sqlSessionTemplate"/>-->
</beans>

 <!-- <properties>
        <springframework.version>4.2.6.RELEASE</springframework.version>
 </properties> -->

 <!--	<dependencies>
		<dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-webmvc</artifactId>
		  <version>${springframework.version}</version>
		</dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.4</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.6</version>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.12</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>
    </dependencies> -->
    
<!-- Spring是轻量级的控制反转IOC 和面向切面AOP的框架
SpringBoot 一个快速开发的脚手架 基于SpringBoot可以快速的开发单个微服务 约定大于配置
SpringCloud 是基于SpringBoot的实现的 
使用了Set注入后 程序不再具有主动性 而是变成了被动的接受对象

Autowired 自动装配 反射机制
    开启注解的支持-->
<context:annotation-config/>
Component有几个衍生出来的注解 在mvc中会按照三层的结构划分
dao (@Repository)
service (@Service)
controller (@Controller)
功能都是一样的 都由Spring来管理 注册到Spring中 装配Bean
@Scope("prototype") 原型模式 表示每次接收一个请求创建一个对象
@Autowired：根据属性类型进行自动装配，若接口不止一个实现，则按照属性名(因为可以不加set)进行匹配bean
@Qualifier：必须配合Autowired使用，可以帮助指定实现类id

@Resource：可以根据类型注入，可以根据名称注入
@Value：注入普通类型属性
@Autowired：可以根据类型注入,可以根据名称注入（默认优先进行byType装配）
若接口不止一个实现，则按照属性名(因为可以不加set)进行匹配bean
创建实体类对象，在实体类中对象类型属性上或set方法上加上该注解。
加入该注解后，该属性可以不需要添加set方法
@Qualifier：若Autowired按属性名匹配，则可以配合@Qualifier 注解指定实现类id
@Resource: 可以根据类型注入，可以根据名称注入（默认优先进行byName装配）
如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常
如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常
如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常
如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；
@Value：注入普通类型属性
代替了property name=... value=.../ 的繁琐操作。
在普通类型属性上加入

execution(): 表达式主体 (必须加上execution)。
第一个*号：表示返回值类型，*号表示所有的类型。
包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，cn.smd.service.impl包、子孙包下所有类的方法。
第二个*号：表示类名，*号表示所有的类。
*(..):最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。
书写的注意事项：execution(* cn.smd.service.impl.*.*(..))


































